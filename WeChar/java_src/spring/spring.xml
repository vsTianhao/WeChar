<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
	   default-autowire="byName" default-lazy-init="false">
	   
	<!-- 数据源定义 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="root"/>
		<property name="password" value=""/>
	</bean>

	<!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO    详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc
	如oracle示例: 
		原来的sql: select * from user where birth_date = ? and username = ? and age > ?
		转换后sql: select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd') and username = 'badqiu' and age > 20
	 -->
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
       <property name="interceptorNames">
           <list>
              <value>log4jdbcInterceptor</value>        
           </list>
       </property>
       <property name="beanNames">
           <list>
              <value>dataSource</value>
           </list>
       </property>
    </bean>

    	
	<!-- 
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>java:comp/env/jdbc/ds</value></property>
    </bean>
 	-->
 	
 	<!-- 用于测试或demo的hsql的内存dataSource,可以在创建数据库时运行指定的初始化sql语句,如建表,插入测试数据,sql语句之间使用分号";"分隔 -->
 	<!-- 
 	<bean id="dataSource" class="cn.org.rapid_framework.test.hsql.HSQLMemDataSourceFactoryBean">
		<property name="encoding" value="UTF-8"/>
		<property name="scriptLocations">
			<value>classpath*:hsql_test_scripts.sql</value>
		</property>
		<property name="sqlScript">
			<value>
				create table blog(id int);
				insert into blog values (1);
			</value>
		</property>		
	</bean>
 	 -->
 	 <!--applicationContext-resource.xml-->
	 <!-- 国际化,并且可以批定文件编码,可以使用classpath: 或者WEB-INF/ 前缀 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    	<property name="basenames">
    		<list>
    			<value>classpath:i18n/messages</value>
    			<value>classpath:ValidationMessages</value>
    		</list>
    	</property>
    	<property name="defaultEncoding" value="UTF-8"/>
    	<property name="cacheSeconds" value="60"/>
    </bean>
    
	<!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean>
	
	<!--  激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 
	<context:annotation-config />
	-->
		
	<!-- 支持 @AspectJ 标记
		<aop:aspectj-autoproxy/>
	-->

	<!-- 以 @Transactional 标注来定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<!-- 以AspectJ方式 定义 事务 -->
	<!-- 
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* javacommon.base.BaseManager.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.*..*.service.*Manager.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	 -->

	<!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
			 默认的设置请参考Spring文档事务一章. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="pageQuery*" read-only="true"/>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<!-- <bean class="cn.org.rapid_framework.util.holder.ApplicationContextHolder"/> -->
	
	 <!--applicationContext-validator.xml-->
	 <!-- 可以在国际化文件中使用如key: NotBlank.userInfo.username 或是@NotBlank(message="用户名不能为空") -->
	
	<!-- 用于启用Hibernate Validator,并且使用spring MessageSource替换java ResourceBundle -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" >
		<property name="messageInterpolator" ref="messageInterpolator"/>
	</bean>

	<bean id="messageInterpolator" class="org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator" >
		<constructor-arg ref="resourceBundleLocator"></constructor-arg>
	</bean>
	
 	<bean id="resourceBundleLocator" class="cn.org.rapid_framework.beanvalidation.MessageSourceResourceBundleLocator">
 		<property name="messageSource" ref="messageSource"/>		
 	</bean>
    
    <!-- 用于持有Validator,可以将Validator当做静态方法调用,示例:SpringValidatorHolder.validate(blogBean) -->
    <!-- 
    <bean class="cn.org.rapid_framework.util.holder.SpringValidatorHolder">
    	<property name="validator" ref="validator"/>
    </bean>
     -->
</beans>